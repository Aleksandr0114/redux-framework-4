/*Ain't this some complicated shit!*/
.redux-main fieldset.disabled h2, .redux-main .redux-group-tab.disabled h2 { padding-top: 10px; }

.redux-main fieldset.disabled::before, .redux-main .redux-group-tab.disabled::before { color: #e14d43; }

#redux-header { border-color: #69a8bb !important; background: #363b3f !important; }

#redux-header .display_header h2 { color: #fff; }

#redux-header .display_header span { color: #fff !important; }

.redux-container { background: #363b3f; }

.redux-container .redux-main { border-left-width: 0; }

.redux-sidebar { background-color: #363b3f; font-size: 13px; font-weight: 400 !important; line-height: 18px; }

.redux-sidebar .redux-group-menu li.divide { border-bottom-color: #efa09b !important; border-top-color: #efa09b !important; }

.redux-sidebar .redux-group-menu li.activeChild.hasSubSections a { background-color: #e14d43 !important; color: #fff !important; }

.redux-sidebar .redux-group-menu li.activeChild.hasSubSections .subsection li.active a { font-weight: 700 !important; color: #fff !important; }

.redux-sidebar .redux-group-menu li.active a { background-color: #e14d43 !important; color: #fff !important; opacity: 1 !important; font-weight: 700 !important; }

.redux-sidebar .redux-group-menu li.active a:hover { background-color: #e14d43; color: #fff !important; }

.redux-sidebar .redux-group-menu li a { font-weight: 400 !important; color: #fff !important; opacity: 0.9 !important; border-style: hidden !important; -webkit-transition: all 0.2s ease-in-out !important; transition: all 0.2s ease-in-out !important; }

.redux-sidebar .redux-group-menu li a:hover { color: #fff !important; background-color: #e14d43 !important; }

.redux-sidebar .redux-group-menu li .subsection { background: #26292c; }

.redux-sidebar .redux-group-menu li .subsection .redux-group-tab-link-li .redux-group-tab-link-a { font-weight: 400 !important; color: #c3c4c5 !important; background-color: #26292c !important; }

.redux-sidebar .redux-group-menu li .subsection .redux-group-tab-link-li .redux-group-tab-link-a:hover { background-color: #26292c !important; color: #e14d43 !important; opacity: 1; }

.redux-sidebar .redux-group-menu li.hasSubSections.redux-section-hover > a { background-color: #e14d43; color: #fff !important; }

.redux-sidebar .redux-group-menu li.hasSubSections.redux-section-hover > a::after { border-right-color: #26292c; }

.redux-sidebar .redux-group-menu li.hasSubSections.redux-section-hover .redux-group-tab-link-a:hover { color: #fff !important; }

.redux-sidebar .redux-group-menu li.hasSubSections.redux-section-hover .subsection { background-color: #26292c; }

.redux-sidebar .redux-group-menu li.hasSubSections.redux-section-hover .subsection .redux-group-tab-link-a { -webkit-transition: all 0.2s ease-in-out; transition: all 0.2s ease-in-out; }

.redux-sidebar .redux-group-menu li.hasSubSections.redux-section-hover .subsection .redux-group-tab-link-a:hover { background-color: #363b3f; color: #e14d43 !important; }

.postbox.redux-metabox .redux-container .redux-group-menu li.active a { background-color: #e14d43; }

.button.ui-datepicker-current, button.ui-datepicker-close { background-color: #e35950 !important; }

.ui-datepicker-buttonpane button.ui-datepicker-current { background: #e14d43 !important; color: white !important; border: 1px solid #a4231a !important; }

.ui-datepicker-header { background-color: #69a8bb !important; color: white !important; }

.ui-datepicker td .ui-state-active { color: black !important; font-weight: 700 !important; background: white !important; }

.ui-datepicker td .ui-state-hover { color: #e35950 !important; }

.ui-datepicker td .ui-state-highlight { background: #e14d43 !important; border: 1px solid #69a8bb !important; color: white !important; }

.redux-container-switch .cb-disable, .redux-container-switch .cb-enable, .ui-state-default, .ui-widget-content .ui-state-default, .ui-widget-header .ui-state-default { background-color: #f5f5f5 !important; background-image: -khtml-gradient(linear, left top, left bottom, from(#f8f8f8), to(#f5f5f5)) !important; background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #f8f8f8), color-stop(100%, #f5f5f5)) !important; background-image: -webkit-linear-gradient(top, #f8f8f8, #f5f5f5) !important; background-image: -linear-gradient(top, #f8f8f8, #f5f5f5) !important; filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#f8f8f8", endColorstr="#f5f5f5", GradientType=0) !important; border-color: #ccc !important; }

.redux-container-switch .cb-disable.selected { background-color: #646464 !important; background-image: -khtml-gradient(linear, left top, left bottom, from(#929292), to(#646464)) !important; background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #929292), color-stop(100%, #646464)) !important; background-image: -webkit-linear-gradient(top, #929292, #646464) !important; background-image: -linear-gradient(top, #929292, #646464) !important; filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#929292", endColorstr="#646464", GradientType=0) !important; border-color: #767676 !important; }

.redux-container-spinner .ui-widget .ui-spinner-button.ui-state-hover span { background-color: #e56259 !important; background-image: -khtml-gradient(linear, left top, left bottom, from(#e97f78), to(#e56259)) !important; background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #e97f78), color-stop(100%, #e56259)) !important; background-image: -webkit-linear-gradient(top, #e97f78, #e56259) !important; background-image: -linear-gradient(top, #e97f78, #e56259) !important; filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#e97f78", endColorstr="#e56259", GradientType=0) !important; border-color: #e56259 !important; border-color: #e25147 !important; }

.redux-container-spinner .ui-widget .ui-spinner-button.ui-state-active span { background-color: #ba281e !important; background-image: -khtml-gradient(linear, left top, left bottom, from(#d92e23), to(#ba281e)) !important; background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #d92e23), color-stop(100%, #ba281e)) !important; background-image: -webkit-linear-gradient(top, #d92e23, #ba281e) !important; background-image: -linear-gradient(top, #d92e23, #ba281e) !important; filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#d92e23", endColorstr="#ba281e", GradientType=0) !important; border-color: #8e1e17 !important; border-color: #a4231a !important; color: #fff; }

.redux-container-spinner .ui-widget .ui-spinner-button .ui-icon, .redux-container-switch .cb-enable.selected, .redux-field-container .ui-buttonset .ui-state-active { background-color: #e14d43 !important; background-image: -khtml-gradient(linear, left top, left bottom, from(#e66a62), to(#e14d43)) !important; background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #e66a62), color-stop(100%, #e14d43)) !important; background-image: -webkit-linear-gradient(top, #e66a62, #e14d43) !important; background-image: -linear-gradient(top, #e66a62, #e14d43) !important; filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#e66a62", endColorstr="#e14d43", GradientType=0) !important; border-color: #ba281e !important; border-color: #d02c21 !important; -webkit-box-shadow: inset 0 1px 0 #ec8b85, 0 1px 0 rgba(0, 0, 0, 0.15) !important; box-shadow: inset 0 1px 0 #ec8b85, 0 1px 0 rgba(0, 0, 0, 0.15) !important; }

.redux-container-image_select .redux-image-select-selected img { border-color: #e14d43 !important; }

.redux-container-image_select .redux-image-select-selected .tiles { border-color: #e14d43 !important; }

.select2-results .select2-results__option--highlighted { background: #e14d43 !important; }

.select2-container--classic.select2-container--open .select2-dropdown, .select2-container--classic.select2-container--open .select2-selection--single, .select2-container--classic.select2-container--open .select2-selection--multiple, .select2-container--classic .select2-selection--single:focus { border-color: #e14d43 !important; }

.noUi-connect { background-color: #e35950 !important; background-image: -khtml-gradient(linear, left top, left bottom, from(#e8776f), to(#e35950)) !important; background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #e8776f), color-stop(100%, #e35950)) !important; background-image: -webkit-linear-gradient(top, #e8776f, #e35950) !important; background-image: -linear-gradient(top, #e8776f, #e35950) !important; filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#e8776f", endColorstr="#e35950", GradientType=0) !important; }

#redux-footer #redux-share a { color: #e14d43; }

#redux-footer #redux-share a:hover { color: #a4231a; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL19hZG1pbi5zY3NzIiwiY29sb3JzLmNzcyIsIi4uL19taXhpbnMuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQ0FBQTtBQ0lBLDZFQUlZLGlCQUFpQixFQUFBOztBQUo3Qix1RkFRWSxjRFpaLEVBQUE7O0FDa0JBLGdCRDRCQSxnQ0FPVSxFQ2pDTiw4QkFBeUMsRUFBQTs7QUFGN0MsbUNBUVksV0RKUixFQUFBOztBQ0pKLHFDRDRCQSxzQkFxRlksRUFBQTs7QUFyRlosbUJDUkksbUJBcENnQixFQUFBOztBRDRDcEIsK0JBQUEsb0JBTUksRUFBQTs7QUNOSixpQkRBQSx5QkM1Q29CLEVBOENoQixlQUFlLEVEd0puQiwyQkFDSSxFQ3ZKQSxpQkFBaUIsRUFBQTs7QUFKckIsNkNEcUxBLHVDQUVXLEVDN0tLLG9DQUFtRCxFQUFBOztBQVZuRSxtRUFrQndCLG9DQUFxQyxFQVFyQyxzQkFBbUMsRUFBQTs7QUExQjNELHlGRHdRZ0MsMkJFcFQ1QixFRGdGZ0Msc0JBQXNDLEVBQUE7O0FBcEMxRSwrQ0FxRG9CLG9DQUFxQyxFQUNyQyxzQkFBbUMsRUFDbkMscUJBQXFCLEVBQ3JCLDJCQUEyQixFQUFBOztBQXhEL0MscURBNER3Qix5QkQxR3hCLEVDMkd3QixzQkFBa0MsRUFBQTs7QUE3RDFELHdDQW9FZ0IsMkJBQTJCLEVBQzNCLHNCQUF1QixFQUN2Qix1QkFBdUIsRUFDdkIsK0JBQStCLEVBQy9CLG1EQUFtRCxFQUluRCwyQ0FBMkMsRUFBQTs7QUE1RTNELDhDQWdGb0Isc0JBQWtDLEVBQ2xDLG9DQUFxQyxFQUFBOztBQWpGekQsa0RBc0ZnQixtQkE1SGUsRUFBQTs7QUFzQy9CLG1HQTRGd0IsMkJBQTJCLEVBRTNCLHlCQUFrQyxFQUNsQyxvQ0FBbUQsRUFBQTs7QUEvRjNFLHlHQW1HNEIsb0NBQXlELEVBQ3pELHlCQUE2QixFQUM3QixVQUFVLEVBQUE7O0FBckd0Qyw2RUFnSHdCLHlCRDlKeEIsRUMrSndCLHNCQUFrQyxFQUFBOztBQWpIMUQsb0ZBb0g0QiwyQkExSkcsRUFBQTs7QUFzQy9CLHVHQTZINEIsc0JBQWtDLEVBQUE7O0FBN0g5RCxxRkFrSXdCLHlCQXhLTyxFQUFBOztBQXNDL0IsNkdBc0k0Qix3Q0FBd0MsRUFJeEMsZ0NBQWdDLEVBQUE7O0FBMUk1RCxtSEE4SWdDLHlCQTFMWixFQTJMWSx5QkFBNkIsRUFBQTs7QUFXN0Qsd0VBTXdCLHlCQTFNSixFQUFBOztBQW1OcEIsNERBRUksb0NBQWtELEVBQUE7O0FBR3RELHlEQUNJLDhCQUErQixFQUMvQix1QkFBdUIsRUFDdkIsb0NBQWtELEVBQUE7O0FBSXRELHdCQUNJLG9DQUF1QyxFQUN2Qyx1QkFBdUIsRUFBQTs7QUFHM0IscUNBRVEsdUJBQXVCLEVBQ3ZCLDJCQUEyQixFQUMzQiw0QkFBNEIsRUFBQTs7QUFKcEMsb0NBUVEseUJBQXVDLEVBQUE7O0FBUi9DLHdDQVlRLDhCQUErQixFQUMvQixvQ0FBdUMsRUFDdkMsdUJBQXVCLEVBQUE7O0FBSS9CLHdLRHRQQSxvQ0FBQSxFQ0ZJLHVHQUFpRyxFRGdCckcsZ0lBZ0JDLEVDNUJHLDJFQUFxRSxFQUVyRSxvRUFBOEQsRUFFOUQsNkhBQTZILEVBc1A3SCw2QkFBNkIsRUFBQTs7QUFHakMsK0NEL1BBLG9DQUFBLEVDRkksdUdBQWlHLEVEZ0JyRyxnSUFnQkMsRUM1QkcsMkVBQXFFLEVBRXJFLG9FQUE4RCxFQUU5RCw2SEFBNkgsRUEyUDdILGdDQUFnQyxFQUFBOztBQUdwQyw2RURwUUEsb0NBQUEsRUNGSSx1R0FBaUcsRURnQnJHLGdJQWdCQyxFQzVCRywyRUFBcUUsRUFFckUsb0VBQThELEVBRTlELDZIQUE2SCxFQWdRN0gsZ0NBQThDLEVBQzlDLGdDQUE4QyxFQUFBOztBQUdsRCw4RUQxUUEsb0NBQUEsRUNGSSx1R0FBaUcsRURnQnJHLGdJQWdCQyxFQzVCRywyRUFBcUUsRUFFckUsb0VBQThELEVBRTlELDZIQUE2SCxFQXNRN0gsZ0NBQThDLEVBQzlDLGdDQUE4QyxFQUM5QyxXQUFXLEVBQUE7O0FBR2Ysc0tEalJBLG9DQUFBLEVDRkksdUdBQWlHLEVEZ0JyRyxnSUFnQkMsRUM1QkcsMkVBQXFFLEVBRXJFLG9FQUE4RCxFQUU5RCw2SEFBNkgsRUErUTdILGdDQUE4QyxFQUM5QyxnQ0FBOEMsRUFDOUMsaUZBQWdHLEVBQ2hHLHlFQUF3RixFQUFBOztBQUk1RixpRUFDSSxnQ0FBaUMsRUFBQTs7QUFHckMsb0VBQ0ksZ0NBQWlDLEVBQUE7O0FBR3JDLHlEQUNJLDhCQUErQixFQUFBOztBQUduQyx3U0FLUSxnQ0FBaUMsRUFBQTs7QUFJekMsZ0JEalRBLG9DQUFBLEVDRkksdUdBQWlHLEVEZ0JyRyxnSUFnQkMsRUM1QkcsMkVBQXFFLEVBRXJFLG9FQUE4RCxFQUU5RCw2SEFBNkgsRUFBQTs7QUFnVGpJLCtCQUNJLGNEM1RKLEVBQUE7O0FDMFRBLHFDQUlRLGNBQTRCLEVBQUE7O0FBdk9wQyx5anhCQUF5anhCIiwiZmlsZSI6ImNvbG9ycy5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKkFpbid0IHRoaXMgc29tZSBjb21wbGljYXRlZCBzaGl0ISovXG5cbkBpbXBvcnQgXCJfbWl4aW5zLnNjc3NcIjtcblxuLnJlZHV4LW1haW4ge1xuICAgIGZpZWxkc2V0LmRpc2FibGVkLFxuICAgIC5yZWR1eC1ncm91cC10YWIuZGlzYWJsZWQge1xuICAgICAgICBoMiB7XG4gICAgICAgICAgICBwYWRkaW5nLXRvcDogMTBweDtcbiAgICAgICAgfVxuXG4gICAgICAgICY6OmJlZm9yZSB7XG4gICAgICAgICAgICBjb2xvcjogJHByaW1hcnk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIEhlYWRlclxuI3JlZHV4LWhlYWRlciB7XG4gICAgYm9yZGVyLWNvbG9yOiAkc2Vjb25kYXJ5ICFpbXBvcnRhbnQ7XG4gICAgYmFja2dyb3VuZDogJGhlYWRlcl9iYWNrZ3JvdW5kICFpbXBvcnRhbnQ7XG5cbiAgICAuZGlzcGxheV9oZWFkZXIge1xuXG4gICAgICAgIC8vIFRoZW1lIFRpdGxlXG4gICAgICAgIGgyIHtcbiAgICAgICAgICAgIGNvbG9yOiAkaGVhZGVyX3RleHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGVtZSB2ZXJzaW9uXG4gICAgICAgIHNwYW4ge1xuICAgICAgICAgICAgY29sb3I6ICRoZWFkZXJfdGV4dCAhaW1wb3J0YW50O1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBFbnRpcmUgYmFja2dyb3VuZFxuLnJlZHV4LWNvbnRhaW5lciB7XG4gICAgYmFja2dyb3VuZDogJGJhY2tncm91bmQ7XG5cbiAgICAucmVkdXgtbWFpbiB7XG4gICAgICAgIGJvcmRlci1sZWZ0LXdpZHRoOiAwO1xuICAgIH1cbn1cblxuLy8gU2lkZWJhciBiYWNrZ3JvdW5kXG4ucmVkdXgtc2lkZWJhciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQ7XG4gICAgZm9udC1zaXplOiAxM3B4O1xuICAgIGZvbnQtd2VpZ2h0OiA0MDAgIWltcG9ydGFudDtcbiAgICBsaW5lLWhlaWdodDogMThweDtcblxuICAgIC5yZWR1eC1ncm91cC1tZW51IHtcbiAgICAgICAgbGkge1xuICAgICAgICAgICAgJi5kaXZpZGUge1xuICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6IGxpZ2h0ZW4oJHByaW1hcnksIDIwJSkgIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICBib3JkZXItdG9wLWNvbG9yOiBsaWdodGVuKCRwcmltYXJ5LCAyMCUpICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICYuYWN0aXZlQ2hpbGQge1xuICAgICAgICAgICAgICAgICYuaGFzU3ViU2VjdGlvbnMge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIE1lbnUgaXRlbSB3aXRoIGNsb3NlZCBzdWJzZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIGEge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHByaW1hcnkgIWltcG9ydGFudDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9AaWYgJHRleHRfc2hhZG93ID09IDEge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgdGV4dC1zaGFkb3c6IDFweCAxcHggZGFya2VuKCRwcmltYXJ5LCAzMCUpIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vfSBAZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICB0ZXh0LXNoYWRvdzogMXB4IDFweCB0cmFuc3BhcmVudCFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL31cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICRhY3RpdmVfbWVudV90ZXh0ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAuc3Vic2VjdGlvbiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJi5hY3RpdmUge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnNlY3Rpb24gc2VsZWN0ZWQgaXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDAgIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkYWN0aXZlX3N1Ym1lbnVfdGV4dCAhaW1wb3J0YW50O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0BpZiAkdGV4dF9zaGFkb3cgPT0gMSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICB0ZXh0LXNoYWRvdzogMXB4IDFweCBkYXJrZW4oJHByaW1hcnksIDIwJSkhaW1wb3J0YW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy99IEBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIHRleHQtc2hhZG93OiAxcHggMXB4IHRyYW5zcGFyZW50IWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBY3RpdmUgbWVudSBpdGVtLCBubyBzdWJzZWN0aW9uXG4gICAgICAgICAgICAmLmFjdGl2ZSB7XG4gICAgICAgICAgICAgICAgYSB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRwcmltYXJ5ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkYWN0aXZlX21lbnVfdGV4dCAhaW1wb3J0YW50O1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDAgIWltcG9ydGFudDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBBY3RpdmUgbWVudSBpdGVtLCBubyBzdWJzZWN0aW9uIGhvdmVyXG4gICAgICAgICAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHByaW1hcnk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJG1lbnVfaG92ZXJfdGV4dCAhaW1wb3J0YW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbmFjdGl2ZSBtZW51IGl0ZW0sIG5vIHN1YnNlY3Rpb25cbiAgICAgICAgICAgIGEge1xuICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDAgIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHRleHQgIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjkgIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICBib3JkZXItc3R5bGU6IGhpZGRlbiAhaW1wb3J0YW50O1xuICAgICAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQgIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICAtbW96LXRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2UtaW4tb3V0ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgLW1zLXRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2UtaW4tb3V0ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgLW8tdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQgIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlLWluLW91dCAhaW1wb3J0YW50O1xuXG4gICAgICAgICAgICAgICAgLy8gSW5hY3RpdmUgbWVudSBpdGVtLCBubyBzdWJzZWN0aW9uIGhvdmVyXG4gICAgICAgICAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkbWVudV9ob3Zlcl90ZXh0ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRwcmltYXJ5ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAuc3Vic2VjdGlvbiB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHN1YnNlY3Rpb25fYmFja2dyb3VuZDtcblxuICAgICAgICAgICAgICAgIC5yZWR1eC1ncm91cC10YWItbGluay1saSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc3Vic2VjdGlvbiBpbmFjdGl2ZSBtZW51XG4gICAgICAgICAgICAgICAgICAgIC5yZWR1eC1ncm91cC10YWItbGluay1hIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDAgIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vb3BhY2l0eTogMC43IWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkc3Vic2VjdGlvbl90ZXh0ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc3Vic2VjdGlvbl9iYWNrZ3JvdW5kICFpbXBvcnRhbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN1YnNlY3Rpb24gaW5hY3RpdmUgbWVudSBob3ZlclxuICAgICAgICAgICAgICAgICAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHN1YnNlY3Rpb25fYmFja2dyb3VuZF9ob3ZlciAhaW1wb3J0YW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkbWVudV9ob3ZlciAhaW1wb3J0YW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICYuaGFzU3ViU2VjdGlvbnMge1xuICAgICAgICAgICAgICAgICYucmVkdXgtc2VjdGlvbi1ob3ZlciB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc3Vic2VjdGlvbiBpdGVtIHdpdGggZmx5b3V0IGluYWN0aXZlXG4gICAgICAgICAgICAgICAgICAgID4gYSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkcHJpbWFyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkbWVudV9ob3Zlcl90ZXh0ICFpbXBvcnRhbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICY6OmFmdGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmlnaHQtY29sb3I6ICRzdWJzZWN0aW9uX2JhY2tncm91bmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBzdWJzZWN0aW9uIGl0ZW0gd2l0aCBmbHlvdXQgaW5hY3RpdmUgaG92ZXJcbiAgICAgICAgICAgICAgICAgICAgLnJlZHV4LWdyb3VwLXRhYi1saW5rLWEge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9jb2xvcjogJG1lbnVfaG92ZXJfdGV4dCFpbXBvcnRhbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkbWVudV9ob3Zlcl90ZXh0ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAuc3Vic2VjdGlvbiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc3Vic2VjdGlvbl9iYWNrZ3JvdW5kO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmbHlvdXQgc3Vic2VjdGlvbiBpbmFjdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlZHV4LWdyb3VwLXRhYi1saW5rLWEge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLW1vei10cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlLWluLW91dDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtbXMtdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLW8tdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmbHlvdXQgc3Vic2VjdGlvbiBpbmFjdGl2ZSBob3ZlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICRtZW51X2hvdmVyICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBNZXRhYm94LiAgUHNoIVxuLnBvc3Rib3gucmVkdXgtbWV0YWJveCB7XG4gICAgLnJlZHV4LWNvbnRhaW5lciB7XG4gICAgICAgIC5yZWR1eC1ncm91cC1tZW51IHtcbiAgICAgICAgICAgIGxpIHtcbiAgICAgICAgICAgICAgICAmLmFjdGl2ZSB7XG4gICAgICAgICAgICAgICAgICAgIGEge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJG1lbnVfaG92ZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIEZpZWxkc1xuLmJ1dHRvbi51aS1kYXRlcGlja2VyLWN1cnJlbnQsXG5idXR0b24udWktZGF0ZXBpY2tlci1jbG9zZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRlbigkcHJpbWFyeSwgMyUpICFpbXBvcnRhbnQ7XG59XG5cbi51aS1kYXRlcGlja2VyLWJ1dHRvbnBhbmUgYnV0dG9uLnVpLWRhdGVwaWNrZXItY3VycmVudCB7XG4gICAgYmFja2dyb3VuZDogJHByaW1hcnkgIWltcG9ydGFudDtcbiAgICBjb2xvcjogd2hpdGUgIWltcG9ydGFudDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCBkYXJrZW4oJHByaW1hcnksIDIwJSkgIWltcG9ydGFudDtcblxufVxuXG4udWktZGF0ZXBpY2tlci1oZWFkZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICRzZWNvbmRhcnkgIWltcG9ydGFudDtcbiAgICBjb2xvcjogd2hpdGUgIWltcG9ydGFudDtcbn1cblxuLnVpLWRhdGVwaWNrZXIgdGQge1xuICAgIC51aS1zdGF0ZS1hY3RpdmUge1xuICAgICAgICBjb2xvcjogYmxhY2sgIWltcG9ydGFudDtcbiAgICAgICAgZm9udC13ZWlnaHQ6IDcwMCAhaW1wb3J0YW50O1xuICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZSAhaW1wb3J0YW50O1xuICAgIH1cblxuICAgIC51aS1zdGF0ZS1ob3ZlciB7XG4gICAgICAgIGNvbG9yOiBsaWdodGVuKCRwcmltYXJ5LCAzJSkgIWltcG9ydGFudDtcbiAgICB9XG5cbiAgICAudWktc3RhdGUtaGlnaGxpZ2h0IHtcbiAgICAgICAgYmFja2dyb3VuZDogJHByaW1hcnkgIWltcG9ydGFudDtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHNlY29uZGFyeSAhaW1wb3J0YW50O1xuICAgICAgICBjb2xvcjogd2hpdGUgIWltcG9ydGFudDtcbiAgICB9XG59XG5cbi5yZWR1eC1jb250YWluZXItc3dpdGNoIC5jYi1kaXNhYmxlLFxuLnJlZHV4LWNvbnRhaW5lci1zd2l0Y2ggLmNiLWVuYWJsZSxcbi51aS1zdGF0ZS1kZWZhdWx0LFxuLnVpLXdpZGdldC1jb250ZW50IC51aS1zdGF0ZS1kZWZhdWx0LFxuLnVpLXdpZGdldC1oZWFkZXIgLnVpLXN0YXRlLWRlZmF1bHQge1xuICAgIEBpbmNsdWRlIGJhY2tncm91bmRHcmFkaWVudCgjZjVmNWY1LCAjZjhmOGY4KTtcbiAgICBib3JkZXItY29sb3I6ICNjY2MgIWltcG9ydGFudDtcbn1cblxuLnJlZHV4LWNvbnRhaW5lci1zd2l0Y2ggLmNiLWRpc2FibGUuc2VsZWN0ZWQge1xuICAgIEBpbmNsdWRlIGJhY2tncm91bmRHcmFkaWVudCgjNjQ2NDY0LCAjOTI5MjkyKTtcbiAgICBib3JkZXItY29sb3I6ICM3Njc2NzYgIWltcG9ydGFudDtcbn1cblxuLnJlZHV4LWNvbnRhaW5lci1zcGlubmVyIC51aS13aWRnZXQgLnVpLXNwaW5uZXItYnV0dG9uLnVpLXN0YXRlLWhvdmVyIHNwYW4ge1xuICAgIEBpbmNsdWRlIGJhY2tncm91bmRHcmFkaWVudChsaWdodGVuKCRwcmltYXJ5LCA1JSkpO1xuICAgIGJvcmRlci1jb2xvcjogbGlnaHRlbigkcHJpbWFyeSwgNSUpICFpbXBvcnRhbnQ7XG4gICAgYm9yZGVyLWNvbG9yOiBsaWdodGVuKCRwcmltYXJ5LCAxJSkgIWltcG9ydGFudDtcbn1cblxuLnJlZHV4LWNvbnRhaW5lci1zcGlubmVyIC51aS13aWRnZXQgLnVpLXNwaW5uZXItYnV0dG9uLnVpLXN0YXRlLWFjdGl2ZSBzcGFuIHtcbiAgICBAaW5jbHVkZSBiYWNrZ3JvdW5kR3JhZGllbnQoZGFya2VuKCRwcmltYXJ5LCAxNSUpKTtcbiAgICBib3JkZXItY29sb3I6IGRhcmtlbigkcHJpbWFyeSwgMjUlKSAhaW1wb3J0YW50O1xuICAgIGJvcmRlci1jb2xvcjogZGFya2VuKCRwcmltYXJ5LCAyMCUpICFpbXBvcnRhbnQ7XG4gICAgY29sb3I6ICNmZmY7XG59XG5cbi5yZWR1eC1jb250YWluZXItc3Bpbm5lciAudWktd2lkZ2V0IC51aS1zcGlubmVyLWJ1dHRvbiAudWktaWNvbixcbi5yZWR1eC1jb250YWluZXItc3dpdGNoIC5jYi1lbmFibGUuc2VsZWN0ZWQsXG4ucmVkdXgtZmllbGQtY29udGFpbmVyIC51aS1idXR0b25zZXQgLnVpLXN0YXRlLWFjdGl2ZSB7XG4gICAgQGluY2x1ZGUgYmFja2dyb3VuZEdyYWRpZW50KCRwcmltYXJ5KTtcbiAgICBib3JkZXItY29sb3I6IGRhcmtlbigkcHJpbWFyeSwgMTUlKSAhaW1wb3J0YW50O1xuICAgIGJvcmRlci1jb2xvcjogZGFya2VuKCRwcmltYXJ5LCAxMCUpICFpbXBvcnRhbnQ7XG4gICAgLXdlYmtpdC1ib3gtc2hhZG93OiBpbnNldCAwIDFweCAwIGxpZ2h0ZW4oJHByaW1hcnksIDE1JSksIDAgMXB4IDAgcmdiYSgwLCAwLCAwLCAwLjE1KSAhaW1wb3J0YW50O1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMXB4IDAgbGlnaHRlbigkcHJpbWFyeSwgMTUlKSwgMCAxcHggMCByZ2JhKDAsIDAsIDAsIDAuMTUpICFpbXBvcnRhbnQ7XG5cbn1cblxuLnJlZHV4LWNvbnRhaW5lci1pbWFnZV9zZWxlY3QgLnJlZHV4LWltYWdlLXNlbGVjdC1zZWxlY3RlZCBpbWcge1xuICAgIGJvcmRlci1jb2xvcjogJHByaW1hcnkgIWltcG9ydGFudDtcbn1cblxuLnJlZHV4LWNvbnRhaW5lci1pbWFnZV9zZWxlY3QgLnJlZHV4LWltYWdlLXNlbGVjdC1zZWxlY3RlZCAudGlsZXMge1xuICAgIGJvcmRlci1jb2xvcjogJHByaW1hcnkgIWltcG9ydGFudDtcbn1cblxuLnNlbGVjdDItcmVzdWx0cyAuc2VsZWN0Mi1yZXN1bHRzX19vcHRpb24tLWhpZ2hsaWdodGVkIHtcbiAgICBiYWNrZ3JvdW5kOiAkcHJpbWFyeSAhaW1wb3J0YW50O1xufVxuXG4uc2VsZWN0Mi1jb250YWluZXItLWNsYXNzaWMge1xuICAgICYuc2VsZWN0Mi1jb250YWluZXItLW9wZW4gLnNlbGVjdDItZHJvcGRvd24sXG4gICAgJi5zZWxlY3QyLWNvbnRhaW5lci0tb3BlbiAuc2VsZWN0Mi1zZWxlY3Rpb24tLXNpbmdsZSxcbiAgICAmLnNlbGVjdDItY29udGFpbmVyLS1vcGVuIC5zZWxlY3QyLXNlbGVjdGlvbi0tbXVsdGlwbGUsXG4gICAgLnNlbGVjdDItc2VsZWN0aW9uLS1zaW5nbGU6Zm9jdXMge1xuICAgICAgICBib3JkZXItY29sb3I6ICRwcmltYXJ5ICFpbXBvcnRhbnQ7XG4gICAgfVxufVxuXG4ubm9VaS1jb25uZWN0IHtcbiAgICBAaW5jbHVkZSBiYWNrZ3JvdW5kR3JhZGllbnQobGlnaHRlbigkcHJpbWFyeSwgMyUpKTtcbn1cblxuLy8gRm9vdGVyXG4jcmVkdXgtZm9vdGVyICNyZWR1eC1zaGFyZSBhIHtcbiAgICBjb2xvcjogJHByaW1hcnk7XG5cbiAgICAmOmhvdmVyIHtcbiAgICAgICAgY29sb3I6IGRhcmtlbigkcHJpbWFyeSwgMjAlKTtcbiAgICB9XG59XG4iLCIvKkFpbid0IHRoaXMgc29tZSBjb21wbGljYXRlZCBzaGl0ISovXG5cbkBpbXBvcnQgXCJfbWl4aW5zLnNjc3NcIjtcblxuLnJlZHV4LW1haW4ge1xuICAgIGZpZWxkc2V0LmRpc2FibGVkLFxuICAgIC5yZWR1eC1ncm91cC10YWIuZGlzYWJsZWQge1xuICAgICAgICBoMiB7XG4gICAgICAgICAgICBwYWRkaW5nLXRvcDogMTBweDtcbiAgICAgICAgfVxuXG4gICAgICAgICY6OmJlZm9yZSB7XG4gICAgICAgICAgICBjb2xvcjogJHByaW1hcnk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIEhlYWRlclxuI3JlZHV4LWhlYWRlciB7XG4gICAgYm9yZGVyLWNvbG9yOiAkc2Vjb25kYXJ5ICFpbXBvcnRhbnQ7XG4gICAgYmFja2dyb3VuZDogJGhlYWRlcl9iYWNrZ3JvdW5kICFpbXBvcnRhbnQ7XG5cbiAgICAuZGlzcGxheV9oZWFkZXIge1xuXG4gICAgICAgIC8vIFRoZW1lIFRpdGxlXG4gICAgICAgIGgyIHtcbiAgICAgICAgICAgIGNvbG9yOiAkaGVhZGVyX3RleHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGVtZSB2ZXJzaW9uXG4gICAgICAgIHNwYW4ge1xuICAgICAgICAgICAgY29sb3I6ICRoZWFkZXJfdGV4dCAhaW1wb3J0YW50O1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBFbnRpcmUgYmFja2dyb3VuZFxuLnJlZHV4LWNvbnRhaW5lciB7XG4gICAgYmFja2dyb3VuZDogJGJhY2tncm91bmQ7XG5cbiAgICAucmVkdXgtbWFpbiB7XG4gICAgICAgIGJvcmRlci1sZWZ0LXdpZHRoOiAwO1xuICAgIH1cbn1cblxuLy8gU2lkZWJhciBiYWNrZ3JvdW5kXG4ucmVkdXgtc2lkZWJhciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQ7XG4gICAgZm9udC1zaXplOiAxM3B4O1xuICAgIGZvbnQtd2VpZ2h0OiA0MDAgIWltcG9ydGFudDtcbiAgICBsaW5lLWhlaWdodDogMThweDtcblxuICAgIC5yZWR1eC1ncm91cC1tZW51IHtcbiAgICAgICAgbGkge1xuICAgICAgICAgICAgJi5kaXZpZGUge1xuICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6IGxpZ2h0ZW4oJHByaW1hcnksIDIwJSkgIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICBib3JkZXItdG9wLWNvbG9yOiBsaWdodGVuKCRwcmltYXJ5LCAyMCUpICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICYuYWN0aXZlQ2hpbGQge1xuICAgICAgICAgICAgICAgICYuaGFzU3ViU2VjdGlvbnMge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIE1lbnUgaXRlbSB3aXRoIGNsb3NlZCBzdWJzZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIGEge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHByaW1hcnkgIWltcG9ydGFudDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9AaWYgJHRleHRfc2hhZG93ID09IDEge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgdGV4dC1zaGFkb3c6IDFweCAxcHggZGFya2VuKCRwcmltYXJ5LCAzMCUpIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vfSBAZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICB0ZXh0LXNoYWRvdzogMXB4IDFweCB0cmFuc3BhcmVudCFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL31cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICRhY3RpdmVfbWVudV90ZXh0ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAuc3Vic2VjdGlvbiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJi5hY3RpdmUge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnNlY3Rpb24gc2VsZWN0ZWQgaXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDAgIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkYWN0aXZlX3N1Ym1lbnVfdGV4dCAhaW1wb3J0YW50O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0BpZiAkdGV4dF9zaGFkb3cgPT0gMSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICB0ZXh0LXNoYWRvdzogMXB4IDFweCBkYXJrZW4oJHByaW1hcnksIDIwJSkhaW1wb3J0YW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy99IEBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIHRleHQtc2hhZG93OiAxcHggMXB4IHRyYW5zcGFyZW50IWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBY3RpdmUgbWVudSBpdGVtLCBubyBzdWJzZWN0aW9uXG4gICAgICAgICAgICAmLmFjdGl2ZSB7XG4gICAgICAgICAgICAgICAgYSB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRwcmltYXJ5ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkYWN0aXZlX21lbnVfdGV4dCAhaW1wb3J0YW50O1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDAgIWltcG9ydGFudDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBBY3RpdmUgbWVudSBpdGVtLCBubyBzdWJzZWN0aW9uIGhvdmVyXG4gICAgICAgICAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHByaW1hcnk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJG1lbnVfaG92ZXJfdGV4dCAhaW1wb3J0YW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbmFjdGl2ZSBtZW51IGl0ZW0sIG5vIHN1YnNlY3Rpb25cbiAgICAgICAgICAgIGEge1xuICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDAgIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHRleHQgIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjkgIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICBib3JkZXItc3R5bGU6IGhpZGRlbiAhaW1wb3J0YW50O1xuICAgICAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQgIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICAtbW96LXRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2UtaW4tb3V0ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgLW1zLXRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2UtaW4tb3V0ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgLW8tdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQgIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlLWluLW91dCAhaW1wb3J0YW50O1xuXG4gICAgICAgICAgICAgICAgLy8gSW5hY3RpdmUgbWVudSBpdGVtLCBubyBzdWJzZWN0aW9uIGhvdmVyXG4gICAgICAgICAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkbWVudV9ob3Zlcl90ZXh0ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRwcmltYXJ5ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAuc3Vic2VjdGlvbiB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHN1YnNlY3Rpb25fYmFja2dyb3VuZDtcblxuICAgICAgICAgICAgICAgIC5yZWR1eC1ncm91cC10YWItbGluay1saSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc3Vic2VjdGlvbiBpbmFjdGl2ZSBtZW51XG4gICAgICAgICAgICAgICAgICAgIC5yZWR1eC1ncm91cC10YWItbGluay1hIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDAgIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vb3BhY2l0eTogMC43IWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkc3Vic2VjdGlvbl90ZXh0ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc3Vic2VjdGlvbl9iYWNrZ3JvdW5kICFpbXBvcnRhbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN1YnNlY3Rpb24gaW5hY3RpdmUgbWVudSBob3ZlclxuICAgICAgICAgICAgICAgICAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHN1YnNlY3Rpb25fYmFja2dyb3VuZF9ob3ZlciAhaW1wb3J0YW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkbWVudV9ob3ZlciAhaW1wb3J0YW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICYuaGFzU3ViU2VjdGlvbnMge1xuICAgICAgICAgICAgICAgICYucmVkdXgtc2VjdGlvbi1ob3ZlciB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc3Vic2VjdGlvbiBpdGVtIHdpdGggZmx5b3V0IGluYWN0aXZlXG4gICAgICAgICAgICAgICAgICAgID4gYSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkcHJpbWFyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkbWVudV9ob3Zlcl90ZXh0ICFpbXBvcnRhbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICY6OmFmdGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmlnaHQtY29sb3I6ICRzdWJzZWN0aW9uX2JhY2tncm91bmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBzdWJzZWN0aW9uIGl0ZW0gd2l0aCBmbHlvdXQgaW5hY3RpdmUgaG92ZXJcbiAgICAgICAgICAgICAgICAgICAgLnJlZHV4LWdyb3VwLXRhYi1saW5rLWEge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9jb2xvcjogJG1lbnVfaG92ZXJfdGV4dCFpbXBvcnRhbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkbWVudV9ob3Zlcl90ZXh0ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAuc3Vic2VjdGlvbiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc3Vic2VjdGlvbl9iYWNrZ3JvdW5kO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmbHlvdXQgc3Vic2VjdGlvbiBpbmFjdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlZHV4LWdyb3VwLXRhYi1saW5rLWEge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLW1vei10cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlLWluLW91dDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtbXMtdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLW8tdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmbHlvdXQgc3Vic2VjdGlvbiBpbmFjdGl2ZSBob3ZlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICRtZW51X2hvdmVyICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBNZXRhYm94LiAgUHNoIVxuLnBvc3Rib3gucmVkdXgtbWV0YWJveCB7XG4gICAgLnJlZHV4LWNvbnRhaW5lciB7XG4gICAgICAgIC5yZWR1eC1ncm91cC1tZW51IHtcbiAgICAgICAgICAgIGxpIHtcbiAgICAgICAgICAgICAgICAmLmFjdGl2ZSB7XG4gICAgICAgICAgICAgICAgICAgIGEge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJG1lbnVfaG92ZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIEZpZWxkc1xuLmJ1dHRvbi51aS1kYXRlcGlja2VyLWN1cnJlbnQsXG5idXR0b24udWktZGF0ZXBpY2tlci1jbG9zZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRlbigkcHJpbWFyeSwgMyUpICFpbXBvcnRhbnQ7XG59XG5cbi51aS1kYXRlcGlja2VyLWJ1dHRvbnBhbmUgYnV0dG9uLnVpLWRhdGVwaWNrZXItY3VycmVudCB7XG4gICAgYmFja2dyb3VuZDogJHByaW1hcnkgIWltcG9ydGFudDtcbiAgICBjb2xvcjogd2hpdGUgIWltcG9ydGFudDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCBkYXJrZW4oJHByaW1hcnksIDIwJSkgIWltcG9ydGFudDtcblxufVxuXG4udWktZGF0ZXBpY2tlci1oZWFkZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICRzZWNvbmRhcnkgIWltcG9ydGFudDtcbiAgICBjb2xvcjogd2hpdGUgIWltcG9ydGFudDtcbn1cblxuLnVpLWRhdGVwaWNrZXIgdGQge1xuICAgIC51aS1zdGF0ZS1hY3RpdmUge1xuICAgICAgICBjb2xvcjogYmxhY2sgIWltcG9ydGFudDtcbiAgICAgICAgZm9udC13ZWlnaHQ6IDcwMCAhaW1wb3J0YW50O1xuICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZSAhaW1wb3J0YW50O1xuICAgIH1cblxuICAgIC51aS1zdGF0ZS1ob3ZlciB7XG4gICAgICAgIGNvbG9yOiBsaWdodGVuKCRwcmltYXJ5LCAzJSkgIWltcG9ydGFudDtcbiAgICB9XG5cbiAgICAudWktc3RhdGUtaGlnaGxpZ2h0IHtcbiAgICAgICAgYmFja2dyb3VuZDogJHByaW1hcnkgIWltcG9ydGFudDtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHNlY29uZGFyeSAhaW1wb3J0YW50O1xuICAgICAgICBjb2xvcjogd2hpdGUgIWltcG9ydGFudDtcbiAgICB9XG59XG5cbi5yZWR1eC1jb250YWluZXItc3dpdGNoIC5jYi1kaXNhYmxlLFxuLnJlZHV4LWNvbnRhaW5lci1zd2l0Y2ggLmNiLWVuYWJsZSxcbi51aS1zdGF0ZS1kZWZhdWx0LFxuLnVpLXdpZGdldC1jb250ZW50IC51aS1zdGF0ZS1kZWZhdWx0LFxuLnVpLXdpZGdldC1oZWFkZXIgLnVpLXN0YXRlLWRlZmF1bHQge1xuICAgIEBpbmNsdWRlIGJhY2tncm91bmRHcmFkaWVudCgjZjVmNWY1LCAjZjhmOGY4KTtcbiAgICBib3JkZXItY29sb3I6ICNjY2MgIWltcG9ydGFudDtcbn1cblxuLnJlZHV4LWNvbnRhaW5lci1zd2l0Y2ggLmNiLWRpc2FibGUuc2VsZWN0ZWQge1xuICAgIEBpbmNsdWRlIGJhY2tncm91bmRHcmFkaWVudCgjNjQ2NDY0LCAjOTI5MjkyKTtcbiAgICBib3JkZXItY29sb3I6ICM3Njc2NzYgIWltcG9ydGFudDtcbn1cblxuLnJlZHV4LWNvbnRhaW5lci1zcGlubmVyIC51aS13aWRnZXQgLnVpLXNwaW5uZXItYnV0dG9uLnVpLXN0YXRlLWhvdmVyIHNwYW4ge1xuICAgIEBpbmNsdWRlIGJhY2tncm91bmRHcmFkaWVudChsaWdodGVuKCRwcmltYXJ5LCA1JSkpO1xuICAgIGJvcmRlci1jb2xvcjogbGlnaHRlbigkcHJpbWFyeSwgNSUpICFpbXBvcnRhbnQ7XG4gICAgYm9yZGVyLWNvbG9yOiBsaWdodGVuKCRwcmltYXJ5LCAxJSkgIWltcG9ydGFudDtcbn1cblxuLnJlZHV4LWNvbnRhaW5lci1zcGlubmVyIC51aS13aWRnZXQgLnVpLXNwaW5uZXItYnV0dG9uLnVpLXN0YXRlLWFjdGl2ZSBzcGFuIHtcbiAgICBAaW5jbHVkZSBiYWNrZ3JvdW5kR3JhZGllbnQoZGFya2VuKCRwcmltYXJ5LCAxNSUpKTtcbiAgICBib3JkZXItY29sb3I6IGRhcmtlbigkcHJpbWFyeSwgMjUlKSAhaW1wb3J0YW50O1xuICAgIGJvcmRlci1jb2xvcjogZGFya2VuKCRwcmltYXJ5LCAyMCUpICFpbXBvcnRhbnQ7XG4gICAgY29sb3I6ICNmZmY7XG59XG5cbi5yZWR1eC1jb250YWluZXItc3Bpbm5lciAudWktd2lkZ2V0IC51aS1zcGlubmVyLWJ1dHRvbiAudWktaWNvbixcbi5yZWR1eC1jb250YWluZXItc3dpdGNoIC5jYi1lbmFibGUuc2VsZWN0ZWQsXG4ucmVkdXgtZmllbGQtY29udGFpbmVyIC51aS1idXR0b25zZXQgLnVpLXN0YXRlLWFjdGl2ZSB7XG4gICAgQGluY2x1ZGUgYmFja2dyb3VuZEdyYWRpZW50KCRwcmltYXJ5KTtcbiAgICBib3JkZXItY29sb3I6IGRhcmtlbigkcHJpbWFyeSwgMTUlKSAhaW1wb3J0YW50O1xuICAgIGJvcmRlci1jb2xvcjogZGFya2VuKCRwcmltYXJ5LCAxMCUpICFpbXBvcnRhbnQ7XG4gICAgLXdlYmtpdC1ib3gtc2hhZG93OiBpbnNldCAwIDFweCAwIGxpZ2h0ZW4oJHByaW1hcnksIDE1JSksIDAgMXB4IDAgcmdiYSgwLCAwLCAwLCAwLjE1KSAhaW1wb3J0YW50O1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMXB4IDAgbGlnaHRlbigkcHJpbWFyeSwgMTUlKSwgMCAxcHggMCByZ2JhKDAsIDAsIDAsIDAuMTUpICFpbXBvcnRhbnQ7XG5cbn1cblxuLnJlZHV4LWNvbnRhaW5lci1pbWFnZV9zZWxlY3QgLnJlZHV4LWltYWdlLXNlbGVjdC1zZWxlY3RlZCBpbWcge1xuICAgIGJvcmRlci1jb2xvcjogJHByaW1hcnkgIWltcG9ydGFudDtcbn1cblxuLnJlZHV4LWNvbnRhaW5lci1pbWFnZV9zZWxlY3QgLnJlZHV4LWltYWdlLXNlbGVjdC1zZWxlY3RlZCAudGlsZXMge1xuICAgIGJvcmRlci1jb2xvcjogJHByaW1hcnkgIWltcG9ydGFudDtcbn1cblxuLnNlbGVjdDItcmVzdWx0cyAuc2VsZWN0Mi1yZXN1bHRzX19vcHRpb24tLWhpZ2hsaWdodGVkIHtcbiAgICBiYWNrZ3JvdW5kOiAkcHJpbWFyeSAhaW1wb3J0YW50O1xufVxuXG4uc2VsZWN0Mi1jb250YWluZXItLWNsYXNzaWMge1xuICAgICYuc2VsZWN0Mi1jb250YWluZXItLW9wZW4gLnNlbGVjdDItZHJvcGRvd24sXG4gICAgJi5zZWxlY3QyLWNvbnRhaW5lci0tb3BlbiAuc2VsZWN0Mi1zZWxlY3Rpb24tLXNpbmdsZSxcbiAgICAmLnNlbGVjdDItY29udGFpbmVyLS1vcGVuIC5zZWxlY3QyLXNlbGVjdGlvbi0tbXVsdGlwbGUsXG4gICAgLnNlbGVjdDItc2VsZWN0aW9uLS1zaW5nbGU6Zm9jdXMge1xuICAgICAgICBib3JkZXItY29sb3I6ICRwcmltYXJ5ICFpbXBvcnRhbnQ7XG4gICAgfVxufVxuXG4ubm9VaS1jb25uZWN0IHtcbiAgICBAaW5jbHVkZSBiYWNrZ3JvdW5kR3JhZGllbnQobGlnaHRlbigkcHJpbWFyeSwgMyUpKTtcbn1cblxuLy8gRm9vdGVyXG4jcmVkdXgtZm9vdGVyICNyZWR1eC1zaGFyZSBhIHtcbiAgICBjb2xvcjogJHByaW1hcnk7XG5cbiAgICAmOmhvdmVyIHtcbiAgICAgICAgY29sb3I6IGRhcmtlbigkcHJpbWFyeSwgMjAlKTtcbiAgICB9XG59XG4iLCJAbWl4aW4gYmFja2dyb3VuZEdyYWRpZW50KCR0bzogZGFya2VuKCR0bywgNSUpLCAkZnJvbTogbGlnaHRlbigkdG8sIDclKSkge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR0byAhaW1wb3J0YW50O1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IC1raHRtbC1ncmFkaWVudChsaW5lYXIsIGxlZnQgdG9wLCBsZWZ0IGJvdHRvbSwgZnJvbSgkZnJvbSksIHRvKCR0bykpICFpbXBvcnRhbnQ7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogLW1vei1saW5lYXItZ3JhZGllbnQodG9wLCAkZnJvbSwgJHRvKSAhaW1wb3J0YW50O1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IC1tcy1saW5lYXItZ3JhZGllbnQodG9wLCAkZnJvbSwgJHRvKSAhaW1wb3J0YW50O1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IC13ZWJraXQtZ3JhZGllbnQobGluZWFyLCBsZWZ0IHRvcCwgbGVmdCBib3R0b20sIGNvbG9yLXN0b3AoMCUsICRmcm9tKSwgY29sb3Itc3RvcCgxMDAlLCAkdG8pKSAhaW1wb3J0YW50O1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IC13ZWJraXQtbGluZWFyLWdyYWRpZW50KHRvcCwgJGZyb20sICR0bykgIWltcG9ydGFudDtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiAtby1saW5lYXItZ3JhZGllbnQodG9wLCAkZnJvbSwgJHRvKSAhaW1wb3J0YW50O1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IC1saW5lYXItZ3JhZGllbnQodG9wLCAkZnJvbSwgJHRvKSAhaW1wb3J0YW50O1xuXG4gICAgZmlsdGVyOiBwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuZ3JhZGllbnQoc3RhcnRDb2xvcnN0cj1cIiN7JGZyb219XCIsIGVuZENvbG9yc3RyPVwiI3skdG99XCIsIEdyYWRpZW50VHlwZT0wKSAhaW1wb3J0YW50O1xufVxuIl19 */
