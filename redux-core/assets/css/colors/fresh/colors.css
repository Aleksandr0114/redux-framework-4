/*Ain't this some complicated shit!*/
.redux-main fieldset.disabled h2, .redux-main .redux-group-tab.disabled h2 { padding-top: 10px; }

.redux-main fieldset.disabled::before, .redux-main .redux-group-tab.disabled::before { color: #0073aa; }

#redux-header { border-color: #00a0d2 !important; background: #23282d !important; }

#redux-header .display_header h2 { color: #eee; }

#redux-header .display_header span { color: #eee !important; }

.redux-container { background: #23282d; }

.redux-container .redux-main { border-left-width: 0; }

.redux-sidebar { background-color: #23282d; font-size: 13px; font-weight: 400 !important; line-height: 18px; }

.redux-sidebar .redux-group-menu li.divide { border-bottom-color: #11b2ff !important; border-top-color: #11b2ff !important; }

.redux-sidebar .redux-group-menu li.activeChild.hasSubSections a { background-color: #0073aa !important; color: #fff !important; }

.redux-sidebar .redux-group-menu li.activeChild.hasSubSections .subsection li.active a { font-weight: 700 !important; color: #fff !important; }

.redux-sidebar .redux-group-menu li.active a { background-color: #0073aa !important; color: #fff !important; opacity: 1 !important; font-weight: 700 !important; }

.redux-sidebar .redux-group-menu li.active a:hover { background-color: #0073aa; color: #eee !important; }

.redux-sidebar .redux-group-menu li a { font-weight: 400 !important; color: #eee !important; opacity: 0.9 !important; border-style: hidden !important; -webkit-transition: all 0.2s ease-in-out !important; transition: all 0.2s ease-in-out !important; }

.redux-sidebar .redux-group-menu li a:hover { color: #eee !important; background-color: #0073aa !important; }

.redux-sidebar .redux-group-menu li .subsection { background: #32373c; }

.redux-sidebar .redux-group-menu li .subsection .redux-group-tab-link-li .redux-group-tab-link-a { font-weight: 400 !important; color: rgba(240, 245, 250, 0.7) !important; background-color: #32373c !important; }

.redux-sidebar .redux-group-menu li .subsection .redux-group-tab-link-li .redux-group-tab-link-a:hover { background-color: #32373c !important; color: #00b9eb !important; opacity: 1; }

.redux-sidebar .redux-group-menu li.hasSubSections.redux-section-hover > a { background-color: #0073aa; color: #eee !important; }

.redux-sidebar .redux-group-menu li.hasSubSections.redux-section-hover > a::after { border-right-color: #32373c; }

.redux-sidebar .redux-group-menu li.hasSubSections.redux-section-hover .redux-group-tab-link-a:hover { color: #eee !important; }

.redux-sidebar .redux-group-menu li.hasSubSections.redux-section-hover .subsection { background-color: #32373c; }

.redux-sidebar .redux-group-menu li.hasSubSections.redux-section-hover .subsection .redux-group-tab-link-a { -webkit-transition: all 0.2s ease-in-out; transition: all 0.2s ease-in-out; }

.redux-sidebar .redux-group-menu li.hasSubSections.redux-section-hover .subsection .redux-group-tab-link-a:hover { background-color: #23282d; color: #00b9eb !important; }

.postbox.redux-metabox .redux-container .redux-group-menu li.active a { background-color: #00b9eb; }

.button.ui-datepicker-current, button.ui-datepicker-close { background-color: #007db9 !important; }

.ui-datepicker-buttonpane button.ui-datepicker-current { background: #0073aa !important; color: white !important; border: 1px solid #002e44 !important; }

.ui-datepicker-header { background-color: #00a0d2 !important; color: white !important; }

.ui-datepicker td .ui-state-active { color: black !important; font-weight: 700 !important; background: white !important; }

.ui-datepicker td .ui-state-hover { color: #007db9 !important; }

.ui-datepicker td .ui-state-highlight { background: #0073aa !important; border: 1px solid #00a0d2 !important; color: white !important; }

.redux-container-switch .cb-disable, .redux-container-switch .cb-enable, .ui-state-default, .ui-widget-content .ui-state-default, .ui-widget-header .ui-state-default { background-color: #f5f5f5 !important; background-image: -khtml-gradient(linear, left top, left bottom, from(#f8f8f8), to(#f5f5f5)) !important; background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #f8f8f8), color-stop(100%, #f5f5f5)) !important; background-image: -webkit-linear-gradient(top, #f8f8f8, #f5f5f5) !important; background-image: -linear-gradient(top, #f8f8f8, #f5f5f5) !important; filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#f8f8f8", endColorstr="#f5f5f5", GradientType=0) !important; border-color: #ccc !important; }

.redux-container-switch .cb-disable.selected { background-color: #646464 !important; background-image: -khtml-gradient(linear, left top, left bottom, from(#929292), to(#646464)) !important; background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #929292), color-stop(100%, #646464)) !important; background-image: -webkit-linear-gradient(top, #929292, #646464) !important; background-image: -linear-gradient(top, #929292, #646464) !important; filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#929292", endColorstr="#646464", GradientType=0) !important; border-color: #767676 !important; }

.redux-container-spinner .ui-widget .ui-spinner-button.ui-state-hover span { background-color: #0084c4 !important; background-image: -khtml-gradient(linear, left top, left bottom, from(#009ce7), to(#0084c4)) !important; background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #009ce7), color-stop(100%, #0084c4)) !important; background-image: -webkit-linear-gradient(top, #009ce7, #0084c4) !important; background-image: -linear-gradient(top, #009ce7, #0084c4) !important; filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#009ce7", endColorstr="#0084c4", GradientType=0) !important; border-color: #0084c4 !important; border-color: #0076af !important; }

.redux-container-spinner .ui-widget .ui-spinner-button.ui-state-active span { background-color: #003f5e !important; background-image: -khtml-gradient(linear, left top, left bottom, from(#005781), to(#003f5e)) !important; background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #005781), color-stop(100%, #003f5e)) !important; background-image: -webkit-linear-gradient(top, #005781, #003f5e) !important; background-image: -linear-gradient(top, #005781, #003f5e) !important; filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#005781", endColorstr="#003f5e", GradientType=0) !important; border-color: #001d2b !important; border-color: #002e44 !important; color: #fff; }

.redux-container-spinner .ui-widget .ui-spinner-button .ui-icon, .redux-container-switch .cb-enable.selected, .redux-field-container .ui-buttonset .ui-state-active { background-color: #0073aa !important; background-image: -khtml-gradient(linear, left top, left bottom, from(#008bce), to(#0073aa)) !important; background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #008bce), color-stop(100%, #0073aa)) !important; background-image: -webkit-linear-gradient(top, #008bce, #0073aa) !important; background-image: -linear-gradient(top, #008bce, #0073aa) !important; filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#008bce", endColorstr="#0073aa", GradientType=0) !important; border-color: #003f5e !important; border-color: #005177 !important; -webkit-box-shadow: inset 0 1px 0 #00a7f7, 0 1px 0 rgba(0, 0, 0, 0.15) !important; box-shadow: inset 0 1px 0 #00a7f7, 0 1px 0 rgba(0, 0, 0, 0.15) !important; }

.redux-container-image_select .redux-image-select-selected img { border-color: #0073aa !important; }

.redux-container-image_select .redux-image-select-selected .tiles { border-color: #0073aa !important; }

.select2-results .select2-results__option--highlighted { background: #0073aa !important; }

.select2-container--classic.select2-container--open .select2-dropdown, .select2-container--classic.select2-container--open .select2-selection--single, .select2-container--classic.select2-container--open .select2-selection--multiple, .select2-container--classic .select2-selection--single:focus { border-color: #0073aa !important; }

.noUi-connect { background-color: #007db9 !important; background-image: -khtml-gradient(linear, left top, left bottom, from(#0096dd), to(#007db9)) !important; background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #0096dd), color-stop(100%, #007db9)) !important; background-image: -webkit-linear-gradient(top, #0096dd, #007db9) !important; background-image: -linear-gradient(top, #0096dd, #007db9) !important; filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#0096dd", endColorstr="#007db9", GradientType=0) !important; }

#redux-footer #redux-share a { color: #0073aa; }

#redux-footer #redux-share a:hover { color: #002e44; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
