@charset "UTF-8";
#wpbody-content .wrap { height: auto !important; overflow: initial !important; max-width: initial !important; }

.about-wrap hr { border: inherit; border-top: 1px solid #ccc; }

.about-wrap.redux-status .updated, .about-wrap.redux-status .error { margin-top: 10px; }

.about-wrap.redux-status .updated.redux-message { display: block !important; }

.about-wrap.redux-status .redux-message { position: relative; border-left-color: #00a2e3 !important; overflow: hidden; }

.about-wrap.redux-status .redux-message a.skip, .about-wrap.redux-status .redux-message a.docs { opacity: 0.5; text-decoration: none !important; }

.about-wrap.redux-status #debug-report { display: none; margin: 10px 0; padding: 0; position: relative; }

.about-wrap.redux-status #debug-report textarea { font-family: monospace; width: 100%; margin: 0; height: 300px; padding: 20px; border-radius: 0; resize: none; font-size: 12px; line-height: 20px; outline: 0; }

.about-wrap.redux-status table.redux_status_table { margin-bottom: 1em; }

.about-wrap.redux-status table.redux_status_table tr:nth-child(2n) th, .about-wrap.redux-status table.redux_status_table tr:nth-child(2n) td { background: #fcfcfc; }

.about-wrap.redux-status table.redux_status_table th { font-weight: 700; padding: 9px; }

.about-wrap.redux-status table.redux_status_table td:first-child { width: 33%; }

.about-wrap.redux-status table.redux_status_table td.help { width: 1em; }

.about-wrap.redux-status table.redux_status_table td { padding: 9px; }

.about-wrap.redux-status table.redux_status_table td mark { background: transparent none; }

.about-wrap.redux-status table.redux_status_table td mark.yes { color: #7ad03a; }

.about-wrap.redux-status table.redux_status_table td mark.no { color: #999; }

.about-wrap.redux-status table.redux_status_table td mark.error { color: #a00; }

.about-wrap.redux-status table.redux_status_table td ul { margin: 0; }

.about-wrap.redux-status table.redux_status_table .redux-hint-qtip { cursor: help; color: #666; display: inline-block; font-size: 16px; font-style: normal; height: 16px; line-height: 16px; position: relative; vertical-align: middle; width: 16px; }

.about-wrap.redux-status table.redux_status_table .redux-hint-qtip::after { font-family: Dashicons; speak: none; font-weight: 400; font-variant: normal; text-transform: none; line-height: 1; -webkit-font-smoothing: antialiased; margin: 0; text-indent: 0; position: absolute; top: 0; left: 0; width: 100%; height: 100%; text-align: center; content: "ïˆ£"; cursor: help; }

.about-wrap #footer-upgrade { display: none; }

.about-wrap .redux-badge { position: absolute; top: 0; background: #00a2e3; padding: 20px; color: #efefef; margin: 5px 0 0 0; -webkit-box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2); }

.about-wrap .redux-badge::before { color: #fff; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; font-size: 80px; font-weight: normal; width: 165px; height: 165px; line-height: 165px; text-align: center; position: absolute; top: 0; margin: 0; vertical-align: middle; }

.about-wrap .redux-badge .el { background: #00a2e3; display: block !important; font-size: 8em; color: #fff; margin-bottom: 30px; }

.about-wrap .redux-badge span { font-weight: 600; font-size: 14px; text-align: center; position: absolute; bottom: 0; background: rgba(50, 50, 49, 0.47); left: 0; right: 0; padding: 8px; }

.about-wrap .redux-badge small { clear: both; font-weight: 600; font-size: 14px; text-align: center; position: absolute; bottom: 0; background: transparent; left: 0; right: 0; padding: 8px; }

.about-wrap .redux-feature { overflow: visible !important; *zoom: 1; }

.about-wrap .redux-feature::before, .about-wrap .redux-feature::after { content: " "; display: table; }

.about-wrap .redux-feature::after { clear: both; }

.about-wrap h3 + .redux-feature { margin-top: 0; }

.about-wrap .feature-rest div { width: 50% !important; -webkit-box-sizing: border-box; box-sizing: border-box; margin: 0 !important; }

.about-wrap .feature-rest div.icon::before { font-weight: normal; width: 100%; font-size: 170px; line-height: 125px; color: #9c5d90; display: inline-block; position: relative; text-align: center; speak: none; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; }

.about-wrap div.icon { width: 0 !important; padding: 0; margin: 20px 0 !important; }

.about-wrap .about-integrations { background: #fff; margin: 20px 0; padding: 1px 20px 10px; }

.about-wrap .changelog h2 { line-height: 1.4; padding-bottom: 0; }

.about-wrap .changelog .feature-section { padding-top: 1.4em; }

.about-wrap .changelog .prettyprint { overflow-wrap: break-word; }

.about-wrap .changelog .gist-it-gist .gist-file { border: 0 !important; background: 0 !important; }

.about-wrap .changelog .gist-it-gist .gist-file .gist-data { border: 0 !important; background: 0 !important; }

.about-wrap .changelog .gist-it-gist .gist-file .gist-data pre { padding-top: 10px !important; word-break: break-word; }

.about-wrap .theme-screenshot { color: #eee; -webkit-transition: all 0.5s; transition: all 0.5s; }

.about-wrap .theme-screenshot:hover { color: #fff; }

.about-wrap .theme-screenshot i { text-align: center; display: block; margin: 10px; font-size: 90px; line-height: 200px; -webkit-transition: all 0.5s ease; transition: all 0.5s ease; }

.about-wrap .theme-browser .theme { -webkit-transition: all 0.5s; transition: all 0.5s; }

.about-wrap .theme-browser .theme:hover .theme-screenshot i { -webkit-transition: all 0.5s; transition: all 0.5s; font-size: 120px; }

.about-wrap .theme-browser .theme .theme-screenshot::after { content: inherit; display: inherit; padding-top: inherit; }

.about-wrap .theme-screenshot figure { position: relative; overflow: hidden; cursor: pointer; margin: 0; }

.about-wrap .theme-screenshot figure i { position: relative; display: block; font-size: 11em; opacity: 0.8; }

.about-wrap .theme-screenshot figure figcaption { padding: 15px; color: #fff; text-transform: uppercase; font-size: 1.25em; -webkit-backface-visibility: hidden; backface-visibility: hidden; }

.about-wrap .theme-screenshot figure figcaption::before, .about-wrap .theme-screenshot figure figcaption::after { pointer-events: none; }

.about-wrap .theme-screenshot figure figcaption, .about-wrap .theme-screenshot figure figcaption > a { position: absolute; top: 0; left: 0; right: 0; bottom: 0; }

.about-wrap .theme-screenshot figure figcaption > a { z-index: 1000; text-indent: 200%; white-space: nowrap; font-size: 0; opacity: 0; }

.about-wrap .theme-screenshot figure p { margin: 0; letter-spacing: 1px; font-size: 68.5%; }

.about-wrap .theme-screenshot figure i { opacity: 0.7; -webkit-transition: opacity 0.35s; transition: opacity 0.35s; }

.about-wrap .theme:hover figcaption::before, .about-wrap .theme:hover figcaption::after { opacity: 1; -webkit-transform: scale(1); transform: scale(1); }

.about-wrap .theme:hover i { opacity: 0.3; }

.about-wrap .theme:hover p { opacity: 1; -webkit-transform: translate3d(0, 0, 0); transform: translate3d(0, 0, 0); text-shadow: 2px 2px 1px rgba(0, 0, 0, 0.3); }

.about-wrap figure figcaption::before, .about-wrap figure figcaption::after { position: absolute; top: 15px; right: 15px; bottom: 15px; left: 15px; content: ""; opacity: 0; -webkit-transition: opacity 0.35s, -webkit-transform 0.35s; transition: opacity 0.35s, -webkit-transform 0.35s; transition: opacity 0.35s, transform 0.35s; transition: opacity 0.35s, transform 0.35s, -webkit-transform 0.35s; }

.about-wrap figure figcaption::before { border-top: 1px solid #fff; border-bottom: 1px solid #fff; -webkit-transform: scale(0, 1); transform: scale(0, 1); }

.about-wrap figure figcaption::after { border-right: 1px solid #fff; border-left: 1px solid #fff; -webkit-transform: scale(1, 0); transform: scale(1, 0); }

.about-wrap figure p { padding: 10px; text-transform: none; opacity: 0; margin-top: 0 !important; -webkit-transition: opacity 0.35s, -webkit-transform 0.35s; transition: opacity 0.35s, -webkit-transform 0.35s; transition: opacity 0.35s, transform 0.35s; transition: opacity 0.35s, transform 0.35s, -webkit-transform 0.35s; -webkit-transform: translate3d(0, 20px, 0); transform: translate3d(0, 20px, 0); }

.redux-message .twitter-share-button, p.redux-actions .twitter-share-button { margin-top: -3px; margin-left: 3px; vertical-align: middle; }

.redux-message a.donate, .redux-message a.review-us, p.redux-actions a.donate, p.redux-actions a.review-us { opacity: 0.5; text-decoration: none !important; }

.redux-message a.button-demo, p.redux-actions a.button-demo { margin-left: 15px; color: #a00; }

.redux-message a.button-demo.active, p.redux-actions a.button-demo.active { color: #d98500; }

#redux-message { margin-top: 15px !important; display: block !important; margin: 5px 0 15px; border-color: #00a2e3; }

#redux-message h4 { margin-top: 0.5em; }

@media only screen and (min-width: 2000px) { #wpwrap .theme-browser .theme:nth-child(4n), #wpwrap .theme-browser .theme:nth-child(5n) { margin-right: 3%; } }

@media screen and (max-width: 500px) { .about-wrap h2 .nav-tab { width: 100%; margin: 0; padding: 0; height: 40px; line-height: 40px; text-align: center; margin-bottom: 10px; margin-top: 10px; }
	.about-wrap h2.nav-tab-wrapper { padding: 0; width: 100%; } }

@media only screen and (max-width: 1120px) { .theme-browser .theme:nth-child(odd) { margin-right: 5% !important; }
	.theme-browser .theme { width: 47.5% !important; margin-right: auto !important; } }

@media screen and (max-width: 620px) { .theme-browser .theme { width: 100% !important; margin-right: 0; } }

#support_div { /*form styles*/ }

#support_div input.hash { text-align: center; }

#support_div .hide { display: none; }

#support_div .previous { opacity: 0.8; }

#support_div #supportform { /*width: 500px;*/ margin-top: 10px; text-align: center; position: relative; /*inputs*/ /*buttons*/ /*headings*/ }

#support_div #supportform fieldset { background: white; border: 0 none; border-radius: 3px; -webkit-box-shadow: 0 0 15px 1px rgba(0, 0, 0, 0.4); box-shadow: 0 0 15px 1px rgba(0, 0, 0, 0.4); padding: 20px 30px; -webkit-box-sizing: border-box; box-sizing: border-box; width: 86%; margin: 0 7%; /*stacking fieldsets above each other*/ position: absolute; /*Hide all except first fieldset*/ }

#support_div #supportform fieldset:not(:first-of-type) { display: none; }

#support_div #supportform input, #support_div #supportform textarea { padding: 15px; border: 1px solid #ccc; border-radius: 3px; margin-bottom: 10px; width: 100%; -webkit-box-sizing: border-box; box-sizing: border-box; font-family: montserrat; color: #2c3e50; font-size: 13px; }

#support_div #supportform input.checkbox { width: initial; margin-top: 10px; }

#support_div #supportform .action-button { width: 100px; background: #27ae60; font-weight: bold; color: white; border: 0 none; border-radius: 1px; cursor: pointer; padding: 10px 5px; margin: 10px 5px; }

#support_div #supportform .action-button:disabled { opacity: 0.5; }

#support_div #supportform .action-button:hover, #support_div #supportform .action-button:focus { -webkit-box-shadow: 0 0 0 2px white, 0 0 0 3px #27ae60; box-shadow: 0 0 0 2px white, 0 0 0 3px #27ae60; }

#support_div #supportform .fs-title { font-size: 15px; text-transform: uppercase; color: #2c3e50; margin-bottom: 10px; }

#support_div #supportform .fs-subtitle { font-weight: normal; font-size: 13px; text-align: left; color: #666; margin-bottom: 20px; }

#support_div #supportform #toDebug li { text-align: left; width: 45%; float: left; }

#support_div #supportform #user_type { width: 100%; }

#support_div #supportform #user_type td { cursor: pointer; width: 50%; }

#support_div #supportform #user_type td i { font-size: 130px; margin-bottom: 10px; }

#support_div #supportform #user_type td:hover i { color: #176c8e; }

#support_div #supportform #user_type td small { line-height: 2.5em; font-style: italic; }

#support_div #supportform #support_hash { text-align: center; word-break: break-all; }

#support_div .breadcrumb { /*centering*/ display: inline-block; -webkit-box-shadow: 0 0 10px 1px rgba(0, 0, 0, 0.35); box-shadow: 0 0 10px 1px rgba(0, 0, 0, 0.35); overflow: hidden; border-radius: 5px; margin: 15px 0; /*Lets add the numbers for each link using CSS counters. flag is the name of the counter. to be defined using counter-reset in the parent element of the links*/ counter-reset: flag; }

#support_div .breadcrumb li { text-decoration: none; outline: none; display: block; float: left; font-size: 12px; -webkit-transition: all 0.5s; transition: all 0.5s; width: auto; margin: 0; line-height: 36px; color: white; /*need more margin on the left of links to accomodate the numbers*/ padding: 0 10px 0 60px; background: #666; position: relative; /*since the first link does not have a triangle before it we can reduce the left padding to make it look consistent with other links*/ /*adding the arrows for the breadcrumbs using rotated pseudo elements*/ /*we will use the :before element to show numbers*/ }

#support_div .breadcrumb li:first-child { padding-left: 46px; border-radius: 5px 0 0 5px; /*to match with the parent's radius*/ }

#support_div .breadcrumb li:first-child::before { left: 14px; }

#support_div .breadcrumb li:last-child { border-radius: 0 5px 5px 0; /*this was to prevent glitches on hover*/ padding-right: 20px; /*we dont need an arrow after the last link*/ }

#support_div .breadcrumb li:last-child::after { content: none; }

#support_div .breadcrumb li.active { background: #333; }

#support_div .breadcrumb li.active::after { background: #333; }

#support_div .breadcrumb li.active::before { background: #555; }

#support_div .breadcrumb li::after { content: ""; position: absolute; top: 0; right: -18px; /*half of square's length*/ /*same dimension as the line-height of .breadcrumb a */ width: 36px; height: 36px; /*as you see the rotated square takes a larger height. which makes it tough to position it properly. So we are going to scale it down so that the diagonals become equal to the line-height of the link. We scale it to 70.7% because if square's: length = 1; diagonal = (1^2 + 1^2)^0.5 = 1.414 (pythagoras theorem) if diagonal required = 1; length = 1/1.414 = 0.707*/ -webkit-transform: scale(0.707) rotate(45deg); transform: scale(0.707) rotate(45deg); /*we need to prevent the arrows from getting buried under the next link*/ z-index: 1; /*background same as links but the gradient will be rotated to compensate with the transform applied*/ background: #666; /*stylish arrow design using box shadow*/ -webkit-box-shadow: 2px -2px 0 2px rgba(0, 0, 0, 0.4), 3px -3px 0 2px rgba(255, 255, 255, 0.1); box-shadow: 2px -2px 0 2px rgba(0, 0, 0, 0.4), 3px -3px 0 2px rgba(255, 255, 255, 0.1); /* 5px - for rounded arrows and 50px - to prevent hover glitches on the border created using shadows*/ border-radius: 0 5px 0 50px; -webkit-transition: all 0.5s; transition: all 0.5s; }

#support_div .breadcrumb li::before { -webkit-transition: all 0.5s; transition: all 0.5s; content: counter(flag); counter-increment: flag; /*some styles now*/ border-radius: 100%; width: 20px; height: 20px; line-height: 20px; margin: 8px 0; position: absolute; top: 0; left: 30px; background: #444; font-weight: bold; }

.redux-product { margin-bottom: 15px; border: 1px solid #ccc; background: #fff; padding: 0px 20px; min-width: 350px; float: left; margin-right: 20px; }

.redux-product .name { color: #23282d; font-size: 32px; font-weight: 100; margin: 10px 0 0; line-height: 1.3; word-wrap: break-word; overflow-wrap: break-word; text-align: left; }

.redux-product .version { color: #72777c; font-size: 13px; font-weight: 400; float: none; display: inline-block; margin-left: 10px; }

.redux-product .author { margin: 15px 0 25px; color: #72777c; font-size: 16px; font-weight: 400; line-height: inherit; }

.redux-product .type { margin-left: 5px; background-color: #f0ad4e; display: inline; padding: 0.2em 0.5em 0.2em; font-weight: 400; line-height: 1; font-size: 12px; color: #fff !important; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: 0.25em; }

.redux-product .type.theme { background-color: #0099d5; }

.hide { display: none !important; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
