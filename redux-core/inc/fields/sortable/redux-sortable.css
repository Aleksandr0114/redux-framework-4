.redux-container-sortable i.el, .redux-container-sortable i.dashicons-menu { cursor: move; padding-top: 5px; }

.redux-container-sortable label { margin-right: 10px; }

.redux-container-sortable label.bugger { margin-bottom: 0px !important; font-size: 12px !important; color: #999; }

.redux-container-sortable input { margin-right: 10px; }

.redux-container-sortable .checkbox-container { width: 100%; }

.redux-container-sortable .checkbox-container label { margin-bottom: 2px !important; cursor: inherit; }

.redux-container-sortable .checkbox-container .drag { float: right; margin-left: 10px; }

.redux-container-sortable ul.checkbox li { padding: 5px 10px; border: 1px solid #333; background: #fff; margin-bottom: 5px !important; }

.redux-container-sortable ul.checkbox li .dashicons.visibility { padding-top: 4px; margin-right: 10px; cursor: pointer; }

.redux-container-sortable ul.checkbox li.invisible { color: #aaa; border: 1px dashed #aaa; }

.redux-container-sortable ul.checkbox li.invisible .dashicons.visibility { color: #aaa; }

.redux-container-sortable ul.labeled li { line-height: 1.4em !important; }

.redux-container-sortable li { line-height: 30px !important; }

.redux-container-sortable li.ui-state-highlight { height: 30px; width: 364px; margin-bottom: 13px; }

.redux-container-sortable li.placeholder { height: 30px; margin: 10px 0; }

.wp-customizer .redux-sortable input[type="text"] { width: 92%; }

.wp-customizer .redux-sortable i.el { margin-left: 5px; }

.wp-customizer .redux-container-sortable .checkbox-container { width: inherit; }

.wp-customizer .redux-container-sortable .ui-draggable-handle { margin-left: 3%; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkdXgtc29ydGFibGUuY3NzIiwic291cmNlcyI6WyJyZWR1eC1zb3J0YWJsZS5zY3NzIl0sInNvdXJjZXNDb250ZW50IjpbIi5yZWR1eC1jb250YWluZXItc29ydGFibGUge1xuICAgIGkge1xuICAgICAgICAmLmVsLFxuICAgICAgICAmLmRhc2hpY29ucy1tZW51IHtcbiAgICAgICAgICAgIGN1cnNvcjogbW92ZTtcbiAgICAgICAgICAgIHBhZGRpbmctdG9wOiA1cHg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsYWJlbCB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcblxuICAgICAgICAmLmJ1Z2dlciB7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwcHggIWltcG9ydGFudDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweCAhaW1wb3J0YW50O1xuICAgICAgICAgICAgY29sb3I6ICM5OTk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbnB1dCB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICB9XG5cbiAgICAuY2hlY2tib3gtY29udGFpbmVyIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG5cbiAgICAgICAgbGFiZWwge1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMnB4ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICBjdXJzb3I6IGluaGVyaXQ7XG4gICAgICAgIH1cblxuICAgICAgICAuZHJhZyB7XG4gICAgICAgICAgICBmbG9hdDogcmlnaHQ7XG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogMTBweDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVsIHtcbiAgICAgICAgJi5jaGVja2JveCB7XG4gICAgICAgICAgICBsaSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgIzMzMztcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDVweCAhaW1wb3J0YW50O1xuXG4gICAgICAgICAgICAgICAgLmRhc2hpY29ucy52aXNpYmlsaXR5IHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDRweDtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJi5pbnZpc2libGUge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogI2FhYTtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggZGFzaGVkICNhYWE7XG5cbiAgICAgICAgICAgICAgICAgICAgLmRhc2hpY29ucy52aXNpYmlsaXR5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjYWFhO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAmLmxhYmVsZWQge1xuICAgICAgICAgICAgbGkge1xuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjRlbSAhaW1wb3J0YW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGkge1xuICAgICAgICBsaW5lLWhlaWdodDogMzBweCAhaW1wb3J0YW50O1xuXG4gICAgICAgICYudWktc3RhdGUtaGlnaGxpZ2h0IHtcbiAgICAgICAgICAgIGhlaWdodDogMzBweDtcbiAgICAgICAgICAgIHdpZHRoOiAzNjRweDtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEzcHg7XG4gICAgICAgIH1cblxuICAgICAgICAmLnBsYWNlaG9sZGVyIHtcbiAgICAgICAgICAgIGhlaWdodDogMzBweDtcbiAgICAgICAgICAgIG1hcmdpbjogMTBweCAwO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4ud3AtY3VzdG9taXplciB7XG4gICAgLnJlZHV4LXNvcnRhYmxlIHtcbiAgICAgICAgaW5wdXRbdHlwZT1cInRleHRcIl0ge1xuICAgICAgICAgICAgd2lkdGg6IDkyJTtcbiAgICAgICAgfVxuICAgICAgICBpLmVsIHtcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiA1cHg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLnJlZHV4LWNvbnRhaW5lci1zb3J0YWJsZSB7XG4gICAgICAgIC5jaGVja2JveC1jb250YWluZXIge1xuICAgICAgICAgICAgd2lkdGg6IGluaGVyaXQ7XG4gICAgICAgIH1cbiAgICAgICAgLnVpLWRyYWdnYWJsZS1oYW5kbGUge1xuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDMlO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEFBRVEseUJBRmlCLENBQ3JCLENBQUMsQUFDSSxHQUFHLEVBRloseUJBQXlCLENBQ3JCLENBQUMsQUFFSSxlQUFlLENBQUMsRUFDYixNQUFNLEVBQUUsSUFBSSxFQUNaLFdBQVcsRUFBRSxHQUFHLEdBQ25COztBQU5ULEFBU0kseUJBVHFCLENBU3JCLEtBQUssQ0FBQyxFQUNGLFlBQVksRUFBRSxJQUFJLEdBT3JCOztBQWpCTCxBQVlRLHlCQVppQixDQVNyQixLQUFLLEFBR0EsT0FBTyxDQUFDLEVBQ0wsYUFBYSxFQUFFLGNBQWMsRUFDN0IsU0FBUyxFQUFFLGVBQWUsRUFDMUIsS0FBSyxFQUFFLElBQUksR0FDZDs7QUFoQlQsQUFtQkkseUJBbkJxQixDQW1CckIsS0FBSyxDQUFDLEVBQ0YsWUFBWSxFQUFFLElBQUksR0FDckI7O0FBckJMLEFBdUJJLHlCQXZCcUIsQ0F1QnJCLG1CQUFtQixDQUFDLEVBQ2hCLEtBQUssRUFBRSxJQUFJLEdBV2Q7O0FBbkNMLEFBMEJRLHlCQTFCaUIsQ0F1QnJCLG1CQUFtQixDQUdmLEtBQUssQ0FBQyxFQUNGLGFBQWEsRUFBRSxjQUFjLEVBQzdCLE1BQU0sRUFBRSxPQUFPLEdBQ2xCOztBQTdCVCxBQStCUSx5QkEvQmlCLENBdUJyQixtQkFBbUIsQ0FRZixLQUFLLENBQUMsRUFDRixLQUFLLEVBQUUsS0FBSyxFQUNaLFdBQVcsRUFBRSxJQUFJLEdBQ3BCOztBQWxDVCxBQXVDWSx5QkF2Q2EsQ0FxQ3JCLEVBQUUsQUFDRyxTQUFTLENBQ04sRUFBRSxDQUFDLEVBQ0MsT0FBTyxFQUFFLFFBQVEsRUFDakIsTUFBTSxFQUFFLGNBQWMsRUFDdEIsVUFBVSxFQUFFLElBQUksRUFDaEIsYUFBYSxFQUFFLGNBQWMsR0FpQmhDOztBQTVEYixBQTZDZ0IseUJBN0NTLENBcUNyQixFQUFFLEFBQ0csU0FBUyxDQUNOLEVBQUUsQ0FNRSxVQUFVLEFBQUEsV0FBVyxDQUFDLEVBQ2xCLFdBQVcsRUFBRSxHQUFHLEVBQ2hCLFlBQVksRUFBRSxJQUFJLEVBQ2xCLE1BQU0sRUFBRSxPQUFPLEdBQ2xCOztBQWpEakIsQUFtRGdCLHlCQW5EUyxDQXFDckIsRUFBRSxBQUNHLFNBQVMsQ0FDTixFQUFFLEFBWUcsVUFBVSxDQUFDLEVBQ1IsS0FBSyxFQUFFLElBQUksRUFDWCxNQUFNLEVBQUUsZUFBZSxHQUsxQjs7QUExRGpCLEFBdURvQix5QkF2REssQ0FxQ3JCLEVBQUUsQUFDRyxTQUFTLENBQ04sRUFBRSxBQVlHLFVBQVUsQ0FJUCxVQUFVLEFBQUEsV0FBVyxDQUFDLEVBQ2xCLEtBQUssRUFBRSxJQUFJLEdBQ2Q7O0FBekRyQixBQWdFWSx5QkFoRWEsQ0FxQ3JCLEVBQUUsQUEwQkcsUUFBUSxDQUNMLEVBQUUsQ0FBQyxFQUNDLFdBQVcsRUFBRSxnQkFBZ0IsR0FDaEM7O0FBbEViLEFBc0VJLHlCQXRFcUIsQ0FzRXJCLEVBQUUsQ0FBQyxFQUNDLFdBQVcsRUFBRSxlQUFlLEdBWS9COztBQW5GTCxBQXlFUSx5QkF6RWlCLENBc0VyQixFQUFFLEFBR0csbUJBQW1CLENBQUMsRUFDakIsTUFBTSxFQUFFLElBQUksRUFDWixLQUFLLEVBQUUsS0FBSyxFQUNaLGFBQWEsRUFBRSxJQUFJLEdBQ3RCOztBQTdFVCxBQStFUSx5QkEvRWlCLENBc0VyQixFQUFFLEFBU0csWUFBWSxDQUFDLEVBQ1YsTUFBTSxFQUFFLElBQUksRUFDWixNQUFNLEVBQUUsTUFBTSxHQUNqQjs7QUFJVCxBQUVRLGNBRk0sQ0FDVixlQUFlLENBQ1gsS0FBSyxDQUFBLEFBQUEsSUFBQyxDQUFLLE1BQU0sQUFBWCxFQUFhLEVBQ2YsS0FBSyxFQUFFLEdBQUcsR0FDYjs7QUFKVCxBQUtRLGNBTE0sQ0FDVixlQUFlLENBSVgsQ0FBQyxBQUFBLEdBQUcsQ0FBQyxFQUNELFdBQVcsRUFBRSxHQUFHLEdBQ25COztBQVBULEFBVVEsY0FWTSxDQVNWLHlCQUF5QixDQUNyQixtQkFBbUIsQ0FBQyxFQUNoQixLQUFLLEVBQUUsT0FBTyxHQUNqQjs7QUFaVCxBQWFRLGNBYk0sQ0FTVix5QkFBeUIsQ0FJckIsb0JBQW9CLENBQUMsRUFDakIsV0FBVyxFQUFFLEVBQUUsR0FDbEIifQ== */

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHV4LXNvcnRhYmxlLnNjc3MiLCJyZWR1eC1zb3J0YWJsZS5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkVBQUEsWUFBQSxFQ0tZLGdCQUFnQixFQUFBOztBREw1QixrQ0FBQSxrQkF1QkksRUFBQTs7QUF2QkoseUNDYVksNkJBQTZCLEVEYnpDLDBCQXVDWSxFQ3hCQSxXQUFXLEVBQUE7O0FEZnZCLGtDQUFBLGtCQXFDSSxFQUFBOztBQXJDSixnREFBQSxXQUFBLEVBQUE7O0FBQUEsc0RDMkJZLDZCQUE2QixFRDNCekMsZUFzRUksRUFBQTs7QUF0RUosc0RBc0ZBLFlBQ0ksRUN0RFEsaUJBQWlCLEVBQUE7O0FEakM3QiwyQ0N3Q2dCLGlCQUFpQixFQUNqQixzQkFBc0IsRUFDdEIsZ0JBQWdCLEVBQ2hCLDZCQUE2QixFQUFBOztBRDNDN0MsaUVDOENvQixnQkFBZ0IsRUFDaEIsa0JBQWtCLEVBQ2xCLGVBQWUsRUFBQTs7QURoRG5DLHFEQ29Eb0IsV0FBVyxFQUNYLHVCQUF1QixFQUFBOztBRHJEM0MsMkVDd0R3QixXQUFXLEVBQUE7O0FEeERuQywwQ0NpRWdCLDZCQUE2QixFQUFBOztBRGpFN0MsK0JDdUVRLDRCQUE0QixFQUFBOztBRHZFcEMsa0RDMEVZLFlBQVksRUFDWixZQUFZLEVBQ1osbUJBQW1CLEVBQUE7O0FENUUvQiwyQ0NnRlksWUFBWSxFQUNaLGNBQWMsRUFBQTs7QUFLMUIsb0RBR1ksVUFBVSxFQUFBOztBQUh0QixzQ0FNWSxnQkFBZ0IsRUFBQTs7QUFONUIsK0RBV1ksY0FBYyxFQUFBOztBQVgxQixnRUFjWSxlQUFlLEVBQUE7O0FBOUQzQixpMEtBQWkwSyIsImZpbGUiOiJyZWR1eC1zb3J0YWJsZS5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIucmVkdXgtY29udGFpbmVyLXNvcnRhYmxlIHtcbiAgICBpIHtcbiAgICAgICAgJi5lbCxcbiAgICAgICAgJi5kYXNoaWNvbnMtbWVudSB7XG4gICAgICAgICAgICBjdXJzb3I6IG1vdmU7XG4gICAgICAgICAgICBwYWRkaW5nLXRvcDogNXB4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGFiZWwge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG5cbiAgICAgICAgJi5idWdnZXIge1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMHB4ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICBmb250LXNpemU6IDEycHggIWltcG9ydGFudDtcbiAgICAgICAgICAgIGNvbG9yOiAjOTk5O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaW5wdXQge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgfVxuXG4gICAgLmNoZWNrYm94LWNvbnRhaW5lciB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuXG4gICAgICAgIGxhYmVsIHtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDJweCAhaW1wb3J0YW50O1xuICAgICAgICAgICAgY3Vyc29yOiBpbmhlcml0O1xuICAgICAgICB9XG5cbiAgICAgICAgLmRyYWcge1xuICAgICAgICAgICAgZmxvYXQ6IHJpZ2h0O1xuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDEwcHg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1bCB7XG4gICAgICAgICYuY2hlY2tib3gge1xuICAgICAgICAgICAgbGkge1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICMzMzM7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogI2ZmZjtcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA1cHggIWltcG9ydGFudDtcblxuICAgICAgICAgICAgICAgIC5kYXNoaWNvbnMudmlzaWJpbGl0eSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiA0cHg7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICYuaW52aXNpYmxlIHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICNhYWE7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IGRhc2hlZCAjYWFhO1xuXG4gICAgICAgICAgICAgICAgICAgIC5kYXNoaWNvbnMudmlzaWJpbGl0eSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogI2FhYTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJi5sYWJlbGVkIHtcbiAgICAgICAgICAgIGxpIHtcbiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMS40ZW0gIWltcG9ydGFudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxpIHtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDMwcHggIWltcG9ydGFudDtcblxuICAgICAgICAmLnVpLXN0YXRlLWhpZ2hsaWdodCB7XG4gICAgICAgICAgICBoZWlnaHQ6IDMwcHg7XG4gICAgICAgICAgICB3aWR0aDogMzY0cHg7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxM3B4O1xuICAgICAgICB9XG5cbiAgICAgICAgJi5wbGFjZWhvbGRlciB7XG4gICAgICAgICAgICBoZWlnaHQ6IDMwcHg7XG4gICAgICAgICAgICBtYXJnaW46IDEwcHggMDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLndwLWN1c3RvbWl6ZXIge1xuICAgIC5yZWR1eC1zb3J0YWJsZSB7XG4gICAgICAgIGlucHV0W3R5cGU9XCJ0ZXh0XCJdIHtcbiAgICAgICAgICAgIHdpZHRoOiA5MiU7XG4gICAgICAgIH1cbiAgICAgICAgaS5lbCB7XG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogNXB4O1xuICAgICAgICB9XG4gICAgfVxuICAgIC5yZWR1eC1jb250YWluZXItc29ydGFibGUge1xuICAgICAgICAuY2hlY2tib3gtY29udGFpbmVyIHtcbiAgICAgICAgICAgIHdpZHRoOiBpbmhlcml0O1xuICAgICAgICB9XG4gICAgICAgIC51aS1kcmFnZ2FibGUtaGFuZGxlIHtcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAzJTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi5yZWR1eC1jb250YWluZXItc29ydGFibGUge1xuICAgIGkge1xuICAgICAgICAmLmVsLFxuICAgICAgICAmLmRhc2hpY29ucy1tZW51IHtcbiAgICAgICAgICAgIGN1cnNvcjogbW92ZTtcbiAgICAgICAgICAgIHBhZGRpbmctdG9wOiA1cHg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsYWJlbCB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcblxuICAgICAgICAmLmJ1Z2dlciB7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwcHggIWltcG9ydGFudDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweCAhaW1wb3J0YW50O1xuICAgICAgICAgICAgY29sb3I6ICM5OTk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbnB1dCB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICB9XG5cbiAgICAuY2hlY2tib3gtY29udGFpbmVyIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG5cbiAgICAgICAgbGFiZWwge1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMnB4ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICBjdXJzb3I6IGluaGVyaXQ7XG4gICAgICAgIH1cblxuICAgICAgICAuZHJhZyB7XG4gICAgICAgICAgICBmbG9hdDogcmlnaHQ7XG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogMTBweDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVsIHtcbiAgICAgICAgJi5jaGVja2JveCB7XG4gICAgICAgICAgICBsaSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgIzMzMztcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDVweCAhaW1wb3J0YW50O1xuXG4gICAgICAgICAgICAgICAgLmRhc2hpY29ucy52aXNpYmlsaXR5IHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDRweDtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJi5pbnZpc2libGUge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogI2FhYTtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggZGFzaGVkICNhYWE7XG5cbiAgICAgICAgICAgICAgICAgICAgLmRhc2hpY29ucy52aXNpYmlsaXR5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjYWFhO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAmLmxhYmVsZWQge1xuICAgICAgICAgICAgbGkge1xuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjRlbSAhaW1wb3J0YW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGkge1xuICAgICAgICBsaW5lLWhlaWdodDogMzBweCAhaW1wb3J0YW50O1xuXG4gICAgICAgICYudWktc3RhdGUtaGlnaGxpZ2h0IHtcbiAgICAgICAgICAgIGhlaWdodDogMzBweDtcbiAgICAgICAgICAgIHdpZHRoOiAzNjRweDtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEzcHg7XG4gICAgICAgIH1cblxuICAgICAgICAmLnBsYWNlaG9sZGVyIHtcbiAgICAgICAgICAgIGhlaWdodDogMzBweDtcbiAgICAgICAgICAgIG1hcmdpbjogMTBweCAwO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4ud3AtY3VzdG9taXplciB7XG4gICAgLnJlZHV4LXNvcnRhYmxlIHtcbiAgICAgICAgaW5wdXRbdHlwZT1cInRleHRcIl0ge1xuICAgICAgICAgICAgd2lkdGg6IDkyJTtcbiAgICAgICAgfVxuICAgICAgICBpLmVsIHtcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiA1cHg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLnJlZHV4LWNvbnRhaW5lci1zb3J0YWJsZSB7XG4gICAgICAgIC5jaGVja2JveC1jb250YWluZXIge1xuICAgICAgICAgICAgd2lkdGg6IGluaGVyaXQ7XG4gICAgICAgIH1cbiAgICAgICAgLnVpLWRyYWdnYWJsZS1oYW5kbGUge1xuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDMlO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19 */
